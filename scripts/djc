#!/usr/bin/env python

# Deejayd, a media player daemon
# Copyright (C) 2007-2009 Mickael Royer <mickael.royer@gmail.com>
#                         Alexandre Rossi <alexandre.rossi@gmail.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

import sys
from optparse import OptionParser
import socket

from deejayd.net.client import DeejayDaemonSync, DeejaydError,\
                               ConnectError, camelcase_to_underscore

class DjcError(Exception): pass

# Decorators
def command(cmd_path, cmd_args = [], cmd_ans = "ack"):
    def command_instance(func):
        def command_func(self, __args):
            __new_args = list(__args)
            # verify args
            for idx, arg in enumerate(cmd_args):
                try: value = __args[idx]
                except IndexError:
                    if arg["req"] is True:
                        raise DjcError("Arg %s is required" % arg["name"])
                else:
                    if arg['type'] == "int":
                        try: value = int(value)
                        except (ValueError,TypeError):
                            raise DjcError("Arg %s is not an int" % arg["name"])
                    elif arg['type'] == "bool":
                        value = value.lower() in ("on", "true", "1")
                    elif arg['type'] in ("int-list", "list"):
                        value = value.split(",")
                        if arg['type'] == "int-list":
                            try: value = map(int, value)
                            except (ValueError,TypeError):
                                raise DjcError("Arg %s is not an int-list"\
                                        % arg["name"])
                    __new_args[idx] = value

            # find the right client func
            m_path = cmd_path.split(".", 1)
            if len(m_path) == 1:
                func = getattr(self.server, camelcase_to_underscore(m_path[0]))
            else:
                module = getattr(self.server, m_path[0])
                func = getattr(module, camelcase_to_underscore(m_path[1]))

            ans = func(*__new_args)
            if cmd_ans == "dict":
                for key, value in ans.items():
                    print key, ':', value
            elif cmd_ans == "fileAndDirList":
                for dir in ans["directories"]: print "directory:", dir
                for file in ans["files"]: print "file:", file["filename"]
            elif cmd_ans == "media":
                if ans is None:
                    print "No media"
                else:
                    for (k, v) in ans.items():
                        print "%s: %s" % (k, v)

        command_func.__name__ = func.__name__
        command_func.__doc__ = func.__doc__
        return command_func
    return command_instance

class AvailableCommands:

    def __init__(self, server):
        self.server = server

    @command("ping")
    def ping(self, args):
        """Ping server using the protocol"""

    @command("setMode", cmd_args=[{"name":"mode", "type":"string", "req":True}])
    def set_mode(self, args):
        """Set active mode to argument value. ex: djc set_mode webradio"""

    @command("getStatus", cmd_ans = "dict")
    def status(self, args):
        """Get full deejayd status"""

    @command("getStats", cmd_ans = "dict")
    def stats(self, args):
        """Get audio/video library stats"""

    @command("player.playToggle")
    def playtoggle(self, args):
        """Toggle play/pause"""

    @command("player.stop")
    def stop(self, args):
        """Stop player"""

    @command("player.previous")
    def previous(self, args):
        """Previous element in player"""

    @command("player.next")
    def next(self, args):
        """Next element in player"""

    @command("player.getPlaying", cmd_ans = "media")
    def current(self, args):
        """Return the current playing media (if it exists)"""

    SEEK_STEP = 10

    def seek(self, args):
        """Set the position in the stream to argument value
             if preceeded with 'up'|'down', (in|dea)crease volume with value.
             'up'|'down' only also works."""
        status = self.server.get_status()
        if status["state"] == "stop":
            return

        try:
            if args[0] in ['up', 'down']:
                pos = int(status["time"].split(":")[0])
                try:
                    possible_delta = int(args[1])
                except IndexError:
                    possible_delta = AvailableCommands.SEEK_STEP
                if args[0] == 'up':
                    pos += possible_delta
                elif args[0] == 'down':
                    pos -= possible_delta
            else:
                pos = int(args[0])
            self.server.player.seek(pos)
        except (ValueError, IndexError):
            raise DjcError('Bad command line')


    VOLUME_STEP = 10

    def volume(self, args):
        """Set volume to argument value.
             If preceeded with 'up'|'down', (in|dea)crease volume with value.
             'up'|'down' only also works."""
        try:
            if args[0] in ['up', 'down']:
                volume = self.server.get_status()['volume']
                try:
                    possible_delta = int(args[1])
                except IndexError:
                    possible_delta = AvailableCommands.VOLUME_STEP
                if args[0] == 'up':
                    volume += possible_delta
                elif args[0] == 'down':
                    volume -= possible_delta
            else:
                volume = int(args[0])
            self.server.player.set_volume(volume)
        except (ValueError, IndexError):
            raise DjcError('Bad command line')

    @command("audiolib.update",
            cmd_args={"name":"force", "type":"bool", "req":False},
            cmd_ans="dict")
    def audio_update(self, args):
        """Update audio library"""

    @command("audiolib.getDirContent",
            cmd_args=[{"name":"dir", "type":"string", "req":False}],
            cmd_ans="fileAndDirList")
    def get_audio_dir(self, args):
        """Get the content of an directory in audio library.
           ex: djc get_audio_dir "dirname"
           if no dirname has been entered, return root directory content"""

    @command("videolib.update",
            cmd_args={"name":"force", "type":"bool", "req":False},
            cmd_ans="dict")
    def video_update(self, args):
        """Update video library"""

    @command("videolib.getDirContent",
            cmd_args=[{"name":"dir", "type":"string", "req":False}],
            cmd_ans="fileAndDirList")
    def get_video_dir(self, args):
        """Get the content of an directory in video library.
           ex: djc get_video_dir "dirname"
           if no dirname has been entered, return root directory content"""


def get_cmds():
    import types
    cmds = []
    for cmd_name in dir(AvailableCommands):
        if cmd_name[0] != '_':
            cmd = getattr(AvailableCommands, cmd_name)
            if isinstance(cmd, types.UnboundMethodType):
                cmds.append(' : '.join([cmd_name, cmd.__doc__]))
    return cmds


cmd_sep = "\n  * "
cmds = cmd_sep.join(get_cmds())
usage = """usage: %prog [options] COMMAND [COMMAND_OPTIONS]
where COMMAND may be :""" + cmd_sep + cmds

parser = OptionParser(usage=usage)
parser.add_option("", "--host",
                  action="store", type="string",
                  dest="host", default="localhost",
                  help="Hostname or ip address on which deejayd listens. Default is localhost.")
parser.add_option("", "--port",
                  action="store", type="int",
                  dest="port", default=6800,
                  help="Port on which deejayd listens. Default is 6800.")
(options, args) = parser.parse_args()

def fail_cmdline():
    parser.print_help()
    sys.exit("Bad command line.")

if __name__ == '__main__':

    deejayd = DeejayDaemonSync()

    if len(args) < 1:
        fail_cmdline()

    command = args[0]

    cmds = AvailableCommands(deejayd)
    if command in dir(cmds):
        try: deejayd.connect(options.host, options.port)
        except ConnectError, msg:
            print msg
        else:
            try: getattr(AvailableCommands, command)(cmds, args[1:])
            except DeejaydError, msg:
                print "Deejayd Error:", msg
            except DjcError, msg:
                print "Djc Error:", msg
            except socket.error:
                print "Error: the server closes the socket"
            try: deejayd.disconnect()
            except socket.error:
                pass
    else:
        fail_cmdline()


# vim: ts=4 sw=4 expandtab
