#!/usr/bin/env python

import sys
from optparse import OptionParser

from deejayd.net.client import DeejayDaemonSync, DeejaydError,\
                               DeejaydWebradioList,\
                               ConnectError


class AvailableCommands:

    def __init__(self, server):
        self.server = server

    def playtoggle(self, args):
        """Toggle play/pause"""
        self.server.play_toggle()

    def stop(self, args):
        """Stop player"""
        self.server.stop()

    def previous(self, args):
        """Previous element in player"""
        self.server.previous()

    def next(self, args):
        """Next element in player"""
        self.server.next()

    def volume(self, args):
        """Set volume to argument value.
             If preceeded with 'up'|'down', (in|dea)crease volume with value."""
        try:
            if args[0] in ['up', 'down']:
                volume = self.server.get_status()['volume']
                possible_delta = int(args[1])
                if args[0] == 'up':
                    volume += possible_delta
                elif args[0] == 'down':
                    volume -= possible_delta
            else:
                volume = int(args[0])
            self.server.set_volume(volume)
        except (ValueError, IndexError):
            print 'Bad command line'

    def set_option(self, args):
        """Set option to argument value. ex: djc set_option random 1"""
        try:
            option_name = args[0]
            option_value = int(args[1])
        except (ValueError, IndexError):
            print 'Bad command line'
        else:
            self.server.set_option(option_name,option_value)

    def set_mode(self, args):
        """Set option to argument value. ex: djc set_option random 1"""
        try: mode = args[0]
        except IndexError:
            print 'You need to select a mode'
        else:
            self.server.set_mode(mode)

    def set_slang(self, args):
        """select a subtitle channel"""
        try: slang = args[0]
        except IndexError:
            print 'You need to choose a language index'
        else:
            self.server.set_slang(slang)

    def set_alang(self, args):
        """select a audio channel"""
        try: alang = args[0]
        except IndexError:
            print 'You need to choose a language index'
        else:
            self.server.set_alang(alang)

    def status(self, args):
        """Get full deejayd status"""
        for (key, value) in self.server.get_status().items():
            print key, ':', value

    def audio_update(self, args):
        """Update audio library"""
        for (key, value) in self.server.update_audio_library().items():
            print key, ':', value

    def get_audio_dir(self, args):
        """Get the content of an directory in audio library. 
           ex: djc get_audio_dir "dirname"
           if no dirname has been entered, return root directory content"""
        try: dirname = args[0]
        except IndexError: dirname = ""

        rsp = self.server.get_audio_dir(dirname)
        for dir in rsp.get_directories(): print "directory:", dir
        for file in rsp.get_files(): print "file:", file["filename"]

    def video_update(self, args):
        """Update video library"""
        for (key, value) in self.server.update_video_library().items():
            print key, ':', value

    def add_webradio(self, args):
        """Add a webradio. ex: djc add_webradio wr_name url"""
        try:
            wr_name = args[0]
            wr_url = args[1]
        except IndexError:
            print 'Bad command line'
        else:
            wr = DeejaydWebradioList(self.server)
            wr.add_webradio(wr_name,wr_url)

def get_cmds():
    cmds = []
    for cmd_name in dir(AvailableCommands):
        if cmd_name[0] != '_':
            cmd = getattr(AvailableCommands, cmd_name)
            cmds.append(' : '.join([cmd_name, cmd.__doc__]))
    return cmds


cmd_sep = "\n  * "
cmds = cmd_sep.join(get_cmds())
usage = """usage: %prog [options] COMMAND
where COMMAND may be :""" + cmd_sep + cmds

parser = OptionParser(usage=usage)
parser.add_option("", "--host",
                  action="store", type="string",
                  dest="host", default="localhost",
                  help="Hostname or ip address on which deejayd listens. Default is localhost.")
parser.add_option("", "--port",
                  action="store", type="int",
                  dest="port", default=6800,
                  help="Port on which deejayd listens. Default is 6800.")
(options, args) = parser.parse_args()

def fail_cmdline():
    parser.print_help()
    sys.exit("Bad command line.")

if __name__ == '__main__':

    deejayd = DeejayDaemonSync()

    if len(args) < 1:
        fail_cmdline()

    command = args[0]

    cmds = AvailableCommands(deejayd)
    if command in dir(cmds):
        try: deejayd.connect(options.host, options.port)
        except ConnectError, msg:
            print msg
        else:
            try:
                getattr(AvailableCommands, command)(cmds, args[1:])
            except DeejaydError, msg:
                print msg
            deejayd.disconnect()
    else:
        fail_cmdline()


# vim: ts=4 sw=4 expandtab
