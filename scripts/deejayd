#!/usr/bin/env python3

# Deejayd, a media player daemon
# Copyright (C) 2007-2017 Mickael Royer <mickael.royer@gmail.com>
#                         Alexandre Rossi <alexandre.rossi@gmail.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

"""
This is the script used to launch deejayd
"""

import sys
import os
import traceback
from optparse import OptionParser
from pathlib import Path
import gettext


import systemd.daemon


from deejayd.db import connection
from deejayd.ui.i18n import DeejaydTranslations
from deejayd.ui.config import DeejaydConfig
import deejayd.ui.log


INSTALL_BIN_DIR = os.path.dirname(__file__)
binsuffix = os.path.basename(INSTALL_BIN_DIR)
INSTALL_MODE = 'source'
if binsuffix == 'bin':
    # Deejayd is installed, and not in source tree
    INSTALL_MODE = 'installed'
    INSTALL_PREFIX = INSTALL_BIN_DIR[:-len(binsuffix)]

# init translation
######################################################
if INSTALL_MODE == 'source':
    LOCALES_PATH = 'locale'
else:
    LOCALES_PATH = os.path.join(INSTALL_PREFIX, 'share', 'locale')
try:
    t = gettext.translation("deejayd", LOCALES_PATH,
                            class_=DeejaydTranslations)
except IOError:
    t = DeejaydTranslations()
t.install()

usage = "usage: %prog [options]"
parser = OptionParser(usage=usage)
# List options
# The help option must be changed to comply with i18n.
parser.get_option('-h').help = _("Show this help message and exit.")
parser.add_option("-l", "--log-file", type="string", dest="logfile",
                  metavar="FILE", help=_("Specify the log file"))
parser.add_option("-w", "--webui-log", type="string", dest="webui_logfile",
                  metavar="FILE", help=_("Specify the log file for the webui"))
parser.add_option("-c", "--conf-file", type="string", dest="conffile",
                  metavar="FILE", help=_("Specify a custom conf file"))
parser.add_option("-d", "--debug",
                  action="store_true", dest="debug",
                  help=_("Log more debug informations"))

(options, args) = parser.parse_args()
######################################################

# add custom config parms
config = DeejaydConfig()
if options.conffile:
    if os.path.isfile(options.conffile):
        config.read([options.conffile], encoding="utf-8")
    else:
        sys.exit(_("The config file %s does not exist.") % options.conffile)

if options.debug:
    config.set('general', 'log', 'debug')

deejayd.ui.log.set_log_level()


def setEnv(options):
    # create log files if necessary
    for l_file in (options.logfile, options.webui_logfile):
        if l_file is None:
            continue
        Path(l_file).touch(mode=0o644)

    # try to guess XDG_RUNTIME_DIR if not set
    if 'XDG_RUNTIME_DIR' not in os.environ:
        os.environ['XDG_RUNTIME_DIR'] = os.path.join('/run', 'user',
                                                     str(os.geteuid()))

    # try to guess WAYLAND_DISPLAY
    if 'WAYLAND_DISPLAY' not in os.environ:
        for f in os.listdir(os.environ['XDG_RUNTIME_DIR']):
            if f.startswith('wayland'):
                os.environ['WAYLAND_DISPLAY'] = f
                break


def startLog(options):
    from twisted.python import log

    log_file_name = None
    if options.logfile:
        log_file_name = options.logfile

    if log_file_name:
        flo = deejayd.ui.log.SignaledFileLogObserver(log_file_name)
        log.startLoggingWithObserver(flo.emit)
        return flo
    elif 'JOURNAL_STREAM' in os.environ:
        log.startLoggingWithObserver(deejayd.ui.log.JournaldLogObserver('deejayd'))
    else:
        log.startLogging(sys.stdout)


# Start
if __name__ == "__main__":
    config = DeejaydConfig()

    setEnv(options)
    flo = startLog(options)

    from twisted.internet.error import CannotListenError
    from deejayd.ui import log

    def abort(exception=None, msg=None):
        if msg is not None:
            log.err(msg)
        if exception is not None:
            log.err("----Traceback lines----")
            log.err(traceback.format_exc())
            log.err("-----------------------")

        sys.exit(1)

    # install right reactor according to the media backend
    media_backend = config.get("general", "media_backend")
    if media_backend == "gstreamer":
        from twisted.internet import gireactor
        gireactor.install()
    from twisted.internet import reactor

    # configure database connection
    uri = DeejaydConfig().get("database", "uri")
    connection.init(uri)
    # start core
    try:
        from deejayd.server.core import DeejayDaemonCore
        deejayd_core = DeejayDaemonCore()
    except Exception as ex:
        abort(msg=_("Unable to launch deejayd core, "
                    "see traceback for more details"), exception=ex)
    ###############################################################

    from deejayd.server.protocol import DeejaydFactory
    service = False
    # net service
    if config.getboolean("net", "enabled"):
        service = True

        factory = DeejaydFactory(deejayd_core)
        port = config.getint("net", "port")
        for bind_address in config.get_bind_addresses('net'):
            try:
                reactor.listenTCP(port, factory, interface=bind_address)
            except CannotListenError as err:
                deejayd_core.close()
                abort(msg=str(err))

    # webui service
    webui_site = None
    if config.getboolean("webui", "enabled"):
        try:
            from deejayd import webui
        except ImportError as ex:
            log.err(_("Webui does not seem to be installed, disabling."))
            config.set("webui", "enabled", "no")
            log.err("----Traceback lines----")
            log.err(traceback.format_exc())
            log.err("-----------------------")
        else:
            service = True
            htdocs_dir = None
            if INSTALL_MODE == 'source':
                htdocs_dir = os.path.abspath(os.path.join(INSTALL_BIN_DIR, '..',
                                                          'webui'))
            elif INSTALL_MODE == 'installed':
                htdocs_dir = os.path.abspath(os.path.join(INSTALL_PREFIX,
                                                          'share', 'deejayd',
                                                          'htdocs'))

            try:
                webui_site = webui.init(deejayd_core, config,
                                        options.webui_logfile, htdocs_dir)
            except webui.DeejaydWebError as err:
                deejayd_core.close()
                abort(msg=str(err))

            port = config.getint("webui", "port")
            for bind_address in config.get_bind_addresses('webui'):
                try:
                    reactor.listenTCP(port, webui_site, interface=bind_address)
                except CannotListenError as err:
                    deejayd_core.close()
                    abort(msg=str(err))

    # launch reactor
    if not service:
        deejayd_core.close()
        abort(msg=_("No service has been activated"))

    # setup SIGHUP handler
    import signal

    def sig_HUP_cb():
        log.debug("received SIGHUP.")
        if flo is not None:
            flo.reopen_cb()
        if webui_site is not None:
            webui_site.reopen_log()

    def sig_HUP(signal, frame):
        reactor.callFromThread(sig_HUP_cb)
    signal.signal(signal.SIGHUP, sig_HUP)

    # launch reactor
    from twisted.internet import reactor
    reactor.addSystemEventTrigger('before', 'shutdown', deejayd_core.close)
    reactor.addSystemEventTrigger('after', 'startup',
                                  systemd.daemon.notify, 'READY=1')
    reactor.run()


