#!/usr/bin/python -W ignore::DeprecationWarning

# Deejayd, a media player daemon
# Copyright (C) 2007-2017 Mickael Royer <mickael.royer@gmail.com>
#                         Alexandre Rossi <alexandre.rossi@gmail.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

"""
This is a deejayd test server executable
"""

import sys
import os
import traceback
from twisted.python import log
import twisted.internet.error
from deejayd.db import connection
from deejayd.ui.config import DeejaydConfig
from deejayd.ui.i18n import DeejaydTranslations
from deejayd import DeejaydError


# argv[1] should be configuration files
if len(sys.argv) != 2:
    sys.exit('Incorrect invocation')

log.startLogging(open('/tmp/testdeejayd.log', 'a'))

config = DeejaydConfig()
conf_file = sys.argv[1]
if os.path.isfile(conf_file):
    config.read([conf_file])
else:
    os.write(2, 'stopped\n')
    sys.exit()

# init translation
t = DeejaydTranslations()
t.install()


###################
# install reactor
##################
media_backend = config.get("general", "media_backend")
if media_backend == "gstreamer":
    # Install glib2 reactor
    from twisted.internet import glib2reactor
    glib2reactor.install()
from twisted.internet import reactor

# configure database connection
uri = DeejaydConfig().get("database", "uri")
connection.init(uri)

# start core
try:
    from deejayd.server.core import DeejayDaemonCore
    deejayd_core = DeejayDaemonCore(library_update=False)
    deejayd_core.audiolib.update(sync=True)
    if deejayd_core.videolib is not None:
        deejayd_core.videolib.update(sync=True)
except DeejaydError, ex:
    from deejayd.server.utils import str_decode
    err = "Unable to launch deejayd core, see traceback for more details"
    log.msg(err)
    log.msg(str_decode(traceback.format_exc()))
    try:
        deejayd_core.close()
    except:
        pass
    os.write(2, 'stopped\n')
    sys.exit()

###############################################################

# net protocol
if config.getboolean("net", "enabled"):
    from deejayd.server.protocol import DeejaydFactory
    factory = DeejaydFactory(deejayd_core)
    port = config.getint("net", "port")
    try:
        reactor.listenTCP(port, factory)
    except twisted.internet.error.CannotListenError:
        log.msg("Unable to listen on port %d for net protocol" % port)
        # This is to avoid locking the test suite when the server used in the
        # previous test has not stopped listenning.
        deejayd_core.close()
        os.write(2, 'stopped\n')
        sys.exit()
# http protocol
if config.getboolean("webui", "enabled"):
    from deejayd import webui
    htdocs_dir = os.path.abspath(os.path.join(os.path.dirname(__file__),
                                              '..', 'data', 'htdocs'))
    site = webui.init(deejayd_core, config,
                      '/tmp/testdeejayd-webui.log', htdocs_dir)
    port = config.getint("webui", "port")
    try:
        reactor.listenTCP(port, site)
    except twisted.internet.error.CannotListenError:
        log.msg("Unable to listen on port %d for http protocol" % port)
        # This is to avoid locking the test suite when the server used in the
        # previous test has not stopped listenning.
        deejayd_core.close()
        os.write(2, 'stopped\n')
        sys.exit()


def printReady():
    os.write(2, 'ready\n')


reactor.addSystemEventTrigger('after', 'startup', printReady)
reactor.addSystemEventTrigger('before', 'shutdown', deejayd_core.close)
reactor.run()
