#!/bin/sh
### BEGIN INIT INFO
# Provides:          deejayd-xserver
# Required-Start:    $local_fs $remote_fs x11-common
# Required-Stop:     $local_fs $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Launch the deejayd dedicated X server.
# Description:       Prepare environement and launch a minimalistic X session.
### END INIT INFO

# Author: Alexandre Rossi <alexandre.rossi@gmail.com>

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="Deejayd media player daemon dedicated X server"
NAME=deejayd-xserver
DAEMON=/usr/bin/X
DAEMON_USER=deejayd
HOME=/var/lib/$DAEMON_USER
PIDFILE=/var/run/$NAME.pid
AUTHFILE=/var/run/$NAME.authfile
XCLIENTS_PIDFILE=/var/run/$NAME-xclients.pid
LOGFILE=/var/log/$NAME.log
SCRIPTNAME=/etc/init.d/$NAME


# Exit if xorg is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/deejayd ] && . /etc/default/deejayd

# Exit if this method of starting Xorg for deejayd is disabled
[ "$DEEJAYD_XSERVER_METHOD" = "standalone" ] || exit 0

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

DEEJAYD_DISPLAYNAME=${DEEJAYD_DISPLAYNAME:=:0.0}
DEEJAYD_XAUTHORITY=${DEEJAYD_XAUTHORITY:=/var/lib/deejayd/Xauthority}

XAUTHORITY=$DEEJAYD_XAUTHORITY
DISPLAY=$DEEJAYD_DISPLAYNAME
export DISPLAY XAUTHORITY

# check for GNU hostname
if hostname --version > /dev/null 2>&1; then
    if [ -z "`hostname --version 2>&1 | grep GNU`" ]; then
        hostname=`hostname -f`
    fi
fi
if [ -z "$hostname" ]; then
    hostname=`hostname`
fi
authdisplay=${DEEJAYD_DISPLAYNAME:-:0}
authdisplaynet=$hostname$authdisplay

# Generate a MIT MAGIC COOKIE for authentification with the X server. This
# is stolen from /usr/bin/startx .
gen_auth_cookie()
{
    # set up default Xauth info for this machine

    mcookie=`/usr/bin/mcookie`

    if test x"$mcookie" = x; then
        echo "Couldn't create cookie"
        exit 1
    fi
    dummy=0

    # create a file with auth information for the server. ':0' is a dummy.
    xserverauthfile=`mktemp -t serverauth.XXXXXXXXXX`

    xauth -q -f $xserverauthfile << EOF
add :$dummy . $mcookie
EOF
    echo $xserverauthfile > $AUTHFILE

    # now add the same credentials to the client authority file
    # if '$displayname' already exists do not overwrite it as another
    # server man need it. Add them to the '$xserverauthfile' instead.
    for displayname in $authdisplay $authdisplaynet; do
        authcookie=`xauth list "$displayname" 2> /dev/null\
        | sed -n "s/.*$displayname[[:space:]*].*[[:space:]*]//p"` 2>/dev/null;
        if [ "z${authcookie}" = "z" ] ; then
            xauth -q 2> /dev/null << EOF
add $displayname . $mcookie
EOF
        else
            dummy=$(($dummy+1));
            xauth -q -f $xserverauthfile 2> /dev/null << EOF
add :$dummy . $authcookie
EOF
        fi
    done

    for authfile in $DEEJAYD_XAUTHORITY $xserverauthfile; do
        chgrp video $authfile && chmod g+r $authfile
    done
}

do_start()
{
    gen_auth_cookie
    DAEMON_ARGS="$DEEJAYD_DISPLAYNAME $DEEJAYD_XORG_DAEMON_OPTS -auth $xserverauthfile"
    # Return
    #   0 if daemon has been started
    #   2 if daemon could not be started
    is_alive && return 0
    start-stop-daemon --start --pidfile $PIDFILE --make-pidfile\
        --exec $DAEMON\
        -b -c $DAEMON_USER -- $DAEMON_ARGS \
        || return 2

    # Wait for the X server to accept X connections.
    maxtries=40
    tries=0
    while [ "`xorg_ping`" != "pong" ] && [ $tries -lt $maxtries ]
    do
        tries=`expr $tries + 1`
        sleep 0.5
    done
}

do_start_xclients()
{
    # Start the X init script also as a daemon.
    start-stop-daemon --start --pidfile $XCLIENTS_PIDFILE --make-pidfile\
        --exec /bin/sh\
        -b -c $DAEMON_USER -- $DEEJAYD_XINITRC\
        || return 2
}

do_stop()
{
    # Return
    #   0 if daemon has been stopped
    #   1 if daemon was already stopped
    #   2 if daemon could not be stopped
    #   other if a failure occurred
    # Xorg is suid so no user filter for start-stop-daemon
    start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE
    RETVAL="$?"
    [ "$RETVAL" = 2 ] && return 2

    rm -f $PIDFILE

    xauth remove $authdisplay $authdisplaynet
    if [ -e $AUTHFILE ]; then
        xserverauthfile=`cat $AUTHFILE`
        rm -f $xserverauthfile
        rm -f $AUTHFILE
    fi

    return "$RETVAL"
}

do_stop_xclients()
{
    # Return
    #   0 if daemon has been stopped
    #   1 if daemon was already stopped
    #   2 if daemon could not be stopped
    #   other if a failure occurred
    start-stop-daemon --user $DAEMON_USER --stop --quiet --retry=TERM/30/KILL/5 --pidfile $XCLIENTS_PIDFILE
    RETVAL="$?"
    [ "$RETVAL" = 2 ] && return 2

    rm -f $XCLIENTS_PIDFILE

    return "$RETVAL"
}

is_alive () {
    ret=1
    if [ -r "$PIDFILE" ] ; then
        pid=`cat $PIDFILE`
        if [ -e /proc/$pid ] ; then
            procname=`/bin/ps h -p $pid -C $NAME`
            [ -n "$procname" ] && ret=0
        fi
    fi
    return $ret
}

xorg_ping () {
    # This function checks if a basic X client can probe the X server.
    /usr/bin/xprop -root -display $authdisplay > /dev/null 2> /dev/null
    case "$?" in
        0) echo "pong" && return 0;;
        *) echo "fail" && return 1;;
    esac
}

case "$1" in
    start)
        [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
        do_start
        case "$?" in
            0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
            2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
        esac
        [ "$VERBOSE" != no ] && log_daemon_msg "xclients"
        do_start_xclients
        ;;
    stop)
        [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
        do_stop_xclients
        do_stop
        case "$?" in
            0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
            2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
        esac
        [ "$VERBOSE" != no ] && log_daemon_msg "xclients"
        ;;
    restart|force-reload)
        log_daemon_msg "Restarting $DESC" "$NAME"
        do_stop_xclients
        do_stop
        case "$?" in
            0|1)
                do_start
                case "$?" in
                    0) log_end_msg 0 ;;
                    1) log_end_msg 1 ;; # Old process is still running
                    *) log_end_msg 1 ;; # Failed to start
                esac
                ;;
            *)
                # Failed to stop
                log_end_msg 1
                ;;
        esac
        do_start_xclients
        ;;
    status)
        echo -n "Status of $DESC: "
        if is_alive ; then
            echo "alive."
        else
            echo "dead."
            exit 1
        fi
        ;;
    *)
        echo "Usage: $SCRIPTNAME {start|stop|restart|force-reload|status}" >&2
        exit 3
        ;;
esac

:
# vim: ts=4 sw=4 expandtab
