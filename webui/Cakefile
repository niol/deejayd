# Deejayd, a media player daemon
# Copyright (C) 2013 Mickael Royer <mickael.royer@gmail.com>
#                    Alexandre Rossi <alexandre.rossi@gmail.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

fs     = require 'fs'
{exec, spawn} = require 'child_process'
{parser, uglify} = require "uglify-js"
less = require('less')

config =
  srcDir:  'src/app'
  outDir:  'gen'
  srcLessFile: "src/less/main.less"
  inJsFiles: [
    'models/mediafilter'
    'services/util'
    'services/localize'
    'services/alert'
    'services/djdclient'
    'services/player'
    'services/library'
    'services/webradio'
    'widgets/_module'
    'widgets/track'
    'widgets/library'
    'widgets/alerts'
    'widgets/webradio'
    'player/player_ctrls'
    'player/playlist'
    'library/_base'
    'library/music'
    'library/video'
    'webradio/webradio'
    'app'
  ]
  inTplFiles: [
    'player/playlist.tpl'
    'widgets/track.tpl'
    'widgets/alerts.tpl'
    'widgets/file.tpl'
    'widgets/folder.tpl'
    'widgets/audiotag.tpl'
    'widgets/album.tpl'
    'library/music.tpl'
    'library/video.tpl'
    'webradio/webradio.tpl'
    'widgets/webradio-entry.tpl'
    'widgets/webradio-category.tpl'
  ]
  outTplDir: "gen/tpl"
  outFile: 'djd_app'

outJS    = "#{config.outDir}/#{config.outFile}"
outCss    = "#{config.outDir}/#{config.outFile}"
strJsFiles = ("#{config.srcDir}/#{file}.coffee" for file in config.inJsFiles).join ' '

# deal with errors from child processes
exerr  = (err, sout,  serr)->
  process.stdout.write(new Buffer(err))  if err
  process.stdout.write(new Buffer(sout)) if sout
  process.stdout.write(new Buffer(serr)) if serr

task 'build', 'Build deejayd webui application from source files', ->
  if (!fs.existsSync(config.outDir))
    fs.mkdirSync(config.outDir)

  # build main css file
  parser = new(less.Parser)({ paths: ['./src/less'] })
  fs.readFile("#{config.srcLessFile}", 'utf8', (err, cssContents) ->
    throw err if err
    parser.parse(cssContents, (err, tree) ->
      throw err if err
      fs.writeFile "#{outCss}.css", tree.toCSS(), 'utf8', exerr
    )
  )

  # build main js file
  exec "coffee -j #{outJS}.js -c #{strJsFiles}", exerr

  # copy all templates in the correct dir
  fs.mkdir(config.outTplDir, (err) ->
    for file, index in config.inTplFiles then do (file, index) ->
      file_splits = file.split("/")
      dst_file = "#{config.outTplDir}/#{file_splits[file_splits.length - 1]}.html"
      exec "cp src/app/#{file}.html #{dst_file}", exerr
  )

task 'min', 'minify compiled *.js file', ->
  invoke 'build'
  fs.readFile "#{outJS}.js", 'utf8', (err, jsContents) ->
    throw err if err
    ast = parser.parse(jsContents);
    #ast = uglify.ast_mangle(ast) # get a new AST with mangled names -> break angularjs
    ast = uglify.ast_squeeze(ast) # get an AST with compression optimizations
    fs.writeFile "#{outJS}.min.js", uglify.gen_code(ast), 'utf8', exerr

task 'watch', 'watch and compile changes in source dir', ->
  watch = exec "coffee -j #{outJS}.js -cw #{strJsFiles}"
  watch.stdout.on 'data', (data)-> process.stdout.write data

