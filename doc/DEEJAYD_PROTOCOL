                         deejayd - Commands

This protocol is largely based on the MPD (Music Player Daemon) protocol. See
"http://www.musicpd.org/" for more details
However : 
  * Several commands (ex: seek) are a different comportement
  * Commands have been removed (ex: crossface because gstreamer does not
    support crossfade for the moment)
  * Commands have been added 
  * Commands have been renamed (ex: add to pladd)

This document is intended for client developers, not end users.

Format:
-------

If arguments contain spaces, they should be surrounded by double quotation 
marks, ".  

command <type arg1> <type arg2> ...
	explanation: w/ arg1 and arg2

All data between the client and server is encoded in UTF-8. (Note,
that in UTF-8 all standard ansi characters, 0-127, are the same as a standard
ansi encoding. Also, no ansi character appears in any multi-byte
characters.  So, you can use standard C functions like strlen, and strcpy
just fine with UTF-8 encoded strings. For example: "OK\n" encoded in UTF-8 is
simply "OK\n".  For more information on UTF=8: 
http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8 )

Command Completion:
-------------------

A command returns "OK\n" on completion or "ACK some error\n" on failure.
These denote the end of command execution.

NOTE:
-----

For manipulating playlists and playing, we recommend to use the song id of a song 
in the playlist. Using song id's is a safer method when multiple clients are
interacting with DEEJAYD.

Commands:
---------

close
	close the connection with DEEJAYD

ping
	does nothing but return "OK"

setmode <str mode>
	active the mode __mode__ in deejayd
	valid modes are :
		"playlist" to play playlist 
		"webradio" to play webradios 

stats
	display stats
	artists: number of artists
	albums: number of albums
	songs: number of songs
	db_update: last db update in UNIX time

status
	reports current status of player, and volume level.
	volume: (0-100).
	repeat: (0 or 1)
	random: (0 or 1)
	webradio: (31-bit unsigned integer, the webradio version number)
	playlist: (31-bit unsigned integer, the playlist version number)
	playlistlength: (integer, the length of the playlist)
	state: ("play", "stop", or "pause")
	song: (current song stopped on or playing, playlist song number)
	songid: (current song stopped on or playing, playlist songid)
	time: <int elapsed>:<time total> (of current playing/paused song)
	updatings_db: <int job id>


********************************************************************
                  	MEDIADB COMMANDS
********************************************************************

lsinfo <string directory>
	list contents of _directory_, from the db.  _directory_ is optional

find <string type> <string what>
	finds songs in the db that are exactly _what_
	_type_ should be "genre", "album", "artist", or "title"
	_what_ is what to find

search <string type> <string what>
	searches for any song that contain _what_
	_type_ can be "title","artist","album", or "filename"
	search is not case sensitive

update <string path>
	searches mp3 directory for new music and removes old music from the db
	_path_ is an optional argument that maybe a particular directory or 
		song/file to update.
	returned:
		updating_db: <int job id>
	where job id, is the job id requested for your update, and is displayed
	in status, while the requested update is happening
	increments playlist version by 1


********************************************************************
                  	PLAYLIST COMMANDS
********************************************************************

playlist <string playlist>
	displays the playlist
	_playlist_ is optional and specifies the playlist to display
	if not present, deejayd display current playlist
	NOTE: do not use this, instead use 'playlistinfo'

playlistinfo <string playlist> 
	displays list of songs in the playlist
	_playlist_ is optional and specifies the playlist to display
	if not present, deejayd display current playlist

currentsong
	displays the song info of current song (same song that is identified
	in status)

add <string path>
	add the file _path_ to the playlist (directories add recursively)
	_path_ can also be a single file
	increments playlist version by for each song added

clear	
	clears the current playlist
	increments playlist version by 1

delete <int song>
	delete song with _song_ position from playlist
	increments playlist version by 1

deleteid <int songid>
	delete song with _songid_ from playlist
	increments playlist version by 1

move <int song> <int to>
	move song with _song_ position to  _to_ in the playlist
	increments playlist version by 1

moveid <int songid> <int to>
	move song with _songid_ to  _to_ in the playlist
	increments playlist version by 1

shuffle
	shuffles the current playlist
	increments playlist version by 1

pllist
	display the list of recorded playlist as :
	id: name
	
load <string name>
	loads the playlist _name_
	increments playlist version by the number of songs added

rm <string playlist>
	removes the playlist __playlist__ 

save <string name>
	saves the current playlist to _name_ in the database


********************************************************************
                  	PLAYER COMMANDS
********************************************************************

next
	plays next song in playlist

pause
	toggle pause/resume playing

play <int song>
	begin playing playlist at song with _song_ position, _song_ is optional

playid <int songid>
	begin playing playlist at song with _songid_, _songid_ is optional

stop
	stop playing

previous
	plays previous song in playlist

random <int state>
	set random state to _state_, _state_ should be 0 or 1

repeat <int state>
	set repeat state to _state_, _state_ should be 0 or 1

seek <int time>
	seeks to the position _time_ (in seconds) of the current song

setvol <int vol>
	set volume to _vol_
	_vol_ the range of volume is 0-100


********************************************************************
                  	WEBRADIOS COMMANDS
********************************************************************

wrlist
	displays list of webradios

wradd <str webradio> <str name>
	add a webradio
	__webradio__ is url of webradio
	__name__ is its name
	supported formats : pls,m3u and simple url
	increments webradio version by for each radio added

wrdel <int wrid>
	erase webradio with the id __wrid__
	increments webradio version by 1
	
wrclear
	erase all the webradio
	increments webradio version by 1
	

COMMAND LIST
------------

To facilitate faster adding of files, etc, you can pass a list of commands all
at once using a command list.  The command list beings with:

command_list_begin

or:

command_list_ok_begin

And ends with:

command_list_end

It does not execute any commands until the list has ended.  The return
value is whatever the return for a list of commands is.  On success
for all commands, OK is returned.  If a command fails, no more commands
are executed and the appropriate ACK error is returned. If "command_list_ok_begin is used", "list_OK\n" is returned for each successful command executed
in the command list.
