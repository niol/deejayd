
                        deejayd - XML Protocol

All data between the client and server is encoded in UTF-8.
-------------------------------------------------------------------------------

Activate XML protocol :
-----------------------
By default, line protocole is activated.
To activate XML, you have to send "setXML" command at deejayd 

Commands Format :
-----------------
<?xml version="1.0"?>
<deejayd>
    <command name="cmdName1">
        <arg name="argName1" type="simple">value</arg>
        <arg name="argName2" type="multiple">
            <value>value1</value>
            <value>value2</value>
        </arg>
    </command>
    <command name="cmdName2">
        <arg name="argName1" type="simple">value</arg>
        <arg name="argName2" type="multiple">
            <value>value1</value>
            <value>value2</value>
        </arg>
    </command>
</deejayd>
ENDXML
-----------------
ENDXML is used as command delimeter.
For certain commands, you want to pass several values for an argument. 
Then, you have to set the type to "multiple" instead of "single".


-------------------------------------------------------------------------------
Response Format :
-----------------

There are 6 response types :
  * error : Error notification.
{{{
<?xml version="1.0" encoding="utf-8"?>
<deejayd>
	<error name="cmdName">
		error text
	</error>
</deejayd>
}}}
  * Ack : Acknowledgement of a command.
{{{
<?xml version="1.0" encoding="utf-8"?>
<deejayd>
	<response name="cmdName" type="Ack"/>
</deejayd>
}}}
  * KeyValue : A list of key, value pairs.
{{{
<?xml version="1.0" encoding="utf-8"?>
<deejayd>
	<response name="cmdName" type="KeyValue">
		<parm name="parmName0" value="parmValue0"/>
		<parm name="parmName1" value="parmValue1"/>
	</response>
</deejayd>
}}}
  * FileList : A list of files and directories.
{{{
<?xml version="1.0" encoding="utf-8"?>
<deejayd>
	<response name="cmdName" type="FileList">
		<directory name="dirName"/>
		<file>
			<parm name="parmName0" value="parmValue0"/>
			<parm name="parmName1" value="parmValue1"/>
		</file>
	</response>
</deejayd>
}}}
  * WebradioList : A list of webradios with information for each webradio : id, pos, title and url.
{{{
<?xml version="1.0" encoding="utf-8"?>
<deejayd>
	<response name="cmdName" type="WebradioList">
		<webradio>
			<parm name="parmName0" value="parmValue0"/>
			<parm name="parmName1" value="parmValue1"/>
		</webradio>
	</response>
</deejayd>
}}}
  * SongList : A list of songs with information for each song : artist, album, title, id, etc.
{{{
<?xml version="1.0" encoding="utf-8"?>
<deejayd>
	<response name="cmdName" type="SongList">
		<song>
			<parm name="parmName0" value="parmValue0"/>
			<parm name="parmName1" value="parmValue1"/>
		</song>
	</response>
</deejayd>
}}}
  * PlaylistList : A list of playlist names.
{{{
<?xml version="1.0" encoding="utf-8"?>
<deejayd>
	<response name="getPlaylistList" type="PlaylistList">
		<playlist name="playlist1"/>
		<playlist name="playlist2"/>
	</response>
</deejayd>
}}}

-------------------------------------------------------------------------------
Available Commands :
-----------------

-----------------
ping
-----------------
arguments :

description : 
Does nothing, just to test the connextion with the server
    
-----------------
status
-----------------
arguments :

description : 
Return status of deejayd. Given informations are :
  * playlist : _int_ id of the current playlist
  * playlistlength : _int_ length of the current playlist
  * webradio : _int_ id of the current webradio list
  * webradiolength : _int_ number of recorded webradio
  * queue : _int_ id of the current queue
  * queuelength : _int_ length of the current queue
  * random : 0 (not activate) or 1 (activate) 
  * repeat : 0 (not activate) or 1 (activate) 
  * volume : [0-100] current volume value  
  * state : [play-pause-stop] the current state of deejayd
  * song : _int_ the position of the current song
  * songid : _int_ the id of the current song
  * mode : [playlist-webradio] the current mode
  * updating_db : _int_ show when an database update is in progress  
  * updating_error : _string_ error message that apppears when the database
                     update has failed
    
-----------------
stats
-----------------
arguments :

description : 
Return statistic informations :
  * db_update : UNIX time of the last database update
  * songs : songs number in the database
  * artists : number of artists in the database
  * albums : number of albums in the database
    
-----------------
setMode
-----------------
arguments :
mode : type->string, required->true, multiple->false

description : 
Change the player mode. Possible values are :
  * playlist : to manage and listen songs in playlist mode
  * webradio : to manage and listen webradio
    
-----------------
getMode
-----------------
arguments :

description : 
For each possible sources, show if it activate or not. The answer returns :
playlist : 0 or 1 (actually always 1 because it does not need optionnal
                   requirements)
webradio : 0 or 1 (needs gst-plugins-gnomevfs to be activate)
    
-----------------
update
-----------------
arguments :
directory : type->string, required->false, multiple->false

description : 
Update the database. "directory" argument is optional and allow to update just
a particular directory.
  * updating_db : the id of this task. it appears in the result of status
    command until the update are finished.
    
-----------------
getdir
-----------------
arguments :
directory : type->string, required->false, multiple->false

description : 
lists files of "directory".
    
-----------------
search
-----------------
arguments :
type : type->list : 'all','title',                    'genre','filename','artist','album', required->true, multiple->false
txt : type->string, required->true, multiple->false

description : 
Search file where "type" contains "txt" content
    
-----------------
getvideodir
-----------------
arguments :
directory : type->string, required->false, multiple->false

description : 
lists files of video dir "directory".
    
-----------------
play
-----------------
arguments :
id : type->int, required->false, multiple->false

description : 
Begin playing at song or webradio with id "id".
    
-----------------
stop
-----------------
arguments :

description : 
Stop playing
    
-----------------
pause
-----------------
arguments :

description : 
Toggle pause/resume playing
    
-----------------
next
-----------------
arguments :

description : 
Go to next song or webradio
    
-----------------
previous
-----------------
arguments :

description : 
Go to previous song or webradio
    
-----------------
setVolume
-----------------
arguments :
volume : type->int, required->true, multiple->false

description : 
set volume to "volume".
The range of volume is 0-100
    
-----------------
seek
-----------------
arguments :
time : type->int, required->true, multiple->false

description : 
seeks to the position "time" (in seconds) of the current song (in playlist mode).
    
-----------------
random
-----------------
arguments :
value : type->list : 0 or 1, required->true, multiple->false

description : 
set random state to "value", "value" should be 0 or 1
    
-----------------
repeat
-----------------
arguments :
value : type->list 0 or 1, required->true, multiple->false

description : 
set repeat state to "value", "value" should be 0 or 1
    
-----------------
current
-----------------
arguments :

description : 
Return informations on the current song or webradio.
    
-----------------
fullscreen
-----------------
arguments :
value : type->list 0 or 1, required->true, multiple->false

description : 
set video fullscreen to "value", "value" should be 0 (off) or 1 (on)
    
-----------------
loadsubtitle
-----------------
arguments :
value : type->list 0 or 1, required->true, multiple->false

description : 
by default, load subtitle when it is available ("value"=1) or not ("value"=0)
    
-----------------
playlistInfo
-----------------
arguments :
name : type->string, required->false, multiple->false

description : 
Return the content of the playlist "name". 
If no name are given, return the content of the current playlist
    
-----------------
playlistList
-----------------
arguments :

description : 
Return the list of recorded playlists
    
-----------------
playlistAdd
-----------------
arguments :
path : type->string, required->true, multiple->true
pos : type->int, required->false, multiple->false
name : type->string, required->false, multiple->false

description : 
Load files or directories passed in arguments ("path") at the position "pos" in
the playlist "name". If no playlist name is passed, add files in the current 
playlist.
    
-----------------
playlistRemove
-----------------
arguments :
id : type->int, required->true, multiple->true
name : type->string, required->false, multiple->false

description : 
Remove songs with ids passed as argument ("id"), from the playlist "name". 
If no name are given, remove songs from current playlist 
    
-----------------
playlistClear
-----------------
arguments :

description : 
Clear the current playlist.
    
-----------------
playlistMove
-----------------
arguments :
id : type->int, required->true, multiple->false
newPosition : type->int, required->true, multiple->false

description : 
Move song with id equal to "id" to "newPosition "position 
    
-----------------
playlistShuffle
-----------------
arguments :

description : 
Shuffle the current playlist.
    
-----------------
playlistErase
-----------------
arguments :
name : type->string, required->true, multiple->true

description : 
Erase playlists passed in arguments 
    
-----------------
playlistLoad
-----------------
arguments :
name : type->string, required->true, multiple->true
pos : type->int, required->false, multiple->false

description : 
Load playlists passed in arguments ("name") at the position "pos"  
    
-----------------
playlistSave
-----------------
arguments :
name : type->string, required->true, multiple->false

description : 
Save the current playlist to "name" in the database
    
-----------------
webradioList
-----------------
arguments :

description : 
Return the list of recorded webradios
    
-----------------
webradioAdd
-----------------
arguments :
url : type->string, required->true, multiple->false
name : type->string, required->true, multiple->false

description : 
Add a webradio. It's name is "name" and the url of the webradio is "url".
You can pass a playlist for "url" argument (.pls and .m3u format are supported) 
    
-----------------
webradioRemove
-----------------
arguments :
id : type->int, required->true, multiple->true

description : 
Remove webradios with id equal to "ids"
    
-----------------
webradioClear
-----------------
arguments :

description : 
Remove all recorded webradios
    
-----------------
playQueue
-----------------
arguments :
id : type->int, required->true, multiple->false

description : 
Begin playing song with id "id" in the queue.
    
-----------------
queueInfo
-----------------
arguments :

description : 
Return the content of the queue
    
-----------------
queueAdd
-----------------
arguments :
path : type->string, required->true, multiple->true
pos : type->int, required->false, multiple->false

description : 
Load files or directories passed in arguments ("path") at the position "pos" in
the queue
    
-----------------
queueLoadPlaylist
-----------------
arguments :
name : type->string, required->true, multiple->true
pos : type->int, required->false, multiple->false

description : 
Load playlists passed in arguments ("name") at the position "pos" in the queue 
    
-----------------
queueRemove
-----------------
arguments :
id : type->int, required->true, multiple->true

description : 
Remove songs with ids passed as argument ("id"), from the queue. 
    
-----------------
queueClear
-----------------
arguments :

description : 
Remove all songs from the queue
    
-----------------
setvideodir
-----------------
arguments :
directory : type->string, required->false, multiple->false

description : 
Set the current video directory at "directory"
    