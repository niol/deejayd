= deejayd - XML Protocol =

All data between the client and server is encoded in UTF-8.

== Activate XML protocol ==

By default, line protocole is activated.
To activate XML, you have to send "setXML" command at deejayd 

== Commands Format ==

{{{
<?xml version="1.0" encoding="utf-8"?>
<deejayd>
    <command name="cmdName1">
        <arg name="argName1" type="simple">value</arg>
        <arg name="argName2" type="multiple">
            <value>value1</value>
            <value>value2</value>
        </arg>
    </command>
    <command name="cmdName2">
        <arg name="argName1" type="simple">value</arg>
        <arg name="argName2" type="multiple">
            <value>value1</value>
            <value>value2</value>
        </arg>
    </command>
</deejayd>
ENDXML
}}}

{{{ENDXML}}} is used as command delimeter.

For certain commands, you may need to pass several values as an argument. If
so, you have to set the argument type to {{{multiple}}} instead of {{{single}}}.

== Response Format ==

There are 6 response types :
  * error : Error notification.
{{{
<?xml version="1.0" encoding="utf-8"?>
<deejayd>
	<error name="cmdName">
		error text
	</error>
</deejayd>
}}}
  * Ack : Acknowledgement of a command.
{{{
<?xml version="1.0" encoding="utf-8"?>
<deejayd>
	<response name="cmdName" type="Ack"/>
</deejayd>
}}}
  * KeyValue : A list of key, value pairs.
{{{
<?xml version="1.0" encoding="utf-8"?>
<deejayd>
	<response name="cmdName" type="KeyValue">
		<parm name="parmName0" value="parmValue0"/>
		<parm name="parmName1" value="parmValue1"/>
	</response>
</deejayd>
}}}
  * FileList : A list of files and directories.
{{{
<?xml version="1.0" encoding="utf-8"?>
<deejayd>
	<response name="cmdName" type="FileList">
		<directory name="dirName"/>
		<file>
			<parm name="parmName0" value="parmValue0"/>
			<parm name="parmName1" value="parmValue1"/>
		</file>
		<video>
			<parm name="parmName0" value="parmValue0"/>
			<parm name="parmName1" value="parmValue1"/>
		</video>
	</response>
</deejayd>
}}}
  * WebradioList : A list of webradios with information for each webradio : id, pos, title and url.
{{{
<?xml version="1.0" encoding="utf-8"?>
<deejayd>
	<response name="cmdName" type="WebradioList">
		<webradio>
			<parm name="parmName0" value="parmValue0"/>
			<parm name="parmName1" value="parmValue1"/>
		</webradio>
	</response>
</deejayd>
}}}
  * SongList : A list of songs with information for each song : artist, album, title, id, etc.
{{{
<?xml version="1.0" encoding="utf-8"?>
<deejayd>
	<response name="cmdName" type="SongList">
		<song>
			<parm name="parmName0" value="parmValue0"/>
			<parm name="parmName1" value="parmValue1"/>
		</song>
	</response>
</deejayd>
}}}
  * PlaylistList : A list of playlist names.
{{{
<?xml version="1.0" encoding="utf-8"?>
<deejayd>
	<response name="getPlaylistList" type="PlaylistList">
		<playlist name="playlist1"/>
		<playlist name="playlist2"/>
	</response>
</deejayd>
}}}
  * VideoList : A list of videos with information for each video.
{{{
<?xml version="1.0" encoding="utf-8"?>
<deejayd>
	<response name="cmdName" type="VideoList">
		<video>
			<parm name="parmName0" value="parmValue0"/>
			<parm name="parmName1" value="parmValue1"/>
		</video>
	</response>
</deejayd>
}}}
Responses may be combined in the same physical message :
{{{
<?xml version="1.0" encoding="utf-8"?>
<deejayd>
	<response name="cmdName" type="Ack"/>
	<response name="cmdName" type="VideoList">
		<video>
			<parm name="parmName0" value="parmValue0"/>
			<parm name="parmName1" value="parmValue1"/>
		</video>
	</response>
</deejayd>

}}}

== Available Commands ==

=== ping ===

Does nothing, just replies with an acknowledgement that the command was received

Arguments :
  * ''This command does not accept any argument.''

Expected return value : Ack

=== status ===

Return status of deejayd. Given informations are :
  * playlist : _int_ id of the current playlist
  * playlistlength : _int_ length of the current playlist
  * webradio : _int_ id of the current webradio list
  * webradiolength : _int_ number of recorded webradio
  * queue : _int_ id of the current queue
  * queuelength : _int_ length of the current queue
  * random : 0 (not activated) or 1 (activated)
  * repeat : 0 (not activated) or 1 (activated)
  * volume : [0-100] current volume value
  * state : [play-pause-stop] the current state of the player
  * song : _int_ the position of the current song
  * songid : _int_ the id of the current song
  * mode : [playlist-webradio] the current mode
  * audio_updating_db : _int_ show when a audio library update is in progress  
  * audio_updating_error : _string_ error message that apppears when the 
                           audio library update has failed
  * video_updating_db : _int_ show when a video library update is in progress  
  * video_updating_error : _string_ error message that apppears when the 
                           video library update has failed

Arguments :
  * ''This command does not accept any argument.''

Expected return value : KeyValue

=== stats ===

Return statistical informations :
  * audio_library_update : UNIX time of the last audio library update
  * video_library_update : UNIX time of the last video library update
  * songs : number of songs known by the database
  * artists : number of artists in the database
  * albums : number of albums in the database

Arguments :
  * ''This command does not accept any argument.''

Expected return value : KeyValue

=== setMode ===

Change the player mode. Possible values are :
  * playlist : to manage and listen songs
  * video : to manage and wath video file
  * webradio : to manage and listen webradios

Arguments :
  * {{{mode}}} (Simple and Mandatory) : string

Expected return value : Ack

=== getMode ===

For each available source, shows if it is activated or not. The answer
    consists in :
  * playlist : 0 or 1 (actually always 1 because it does not need optionnal
               dependencies)
  * webradio : 0 or 1 (needs gst-plugins-gnomevfs to be activated)
  * video : 0 or 1 (needs video dependencies, X display and needs to be
            activated in configuration)

Arguments :
  * ''This command does not accept any argument.''

Expected return value : KeyValue

=== audioUpdate ===

Update the audio library.
  * audio_updating_db : the id of this task. It appears in the status until the
    update are completed.

Arguments :
  * ''This command does not accept any argument.''

Expected return value : KeyValue

=== videoUpdate ===

Update the video library.
  * video_updating_db : the id of this task. It appears in the status until the
    update are completed.

Arguments :
  * ''This command does not accept any argument.''

Expected return value : KeyValue

=== getdir ===

List the files of the directory supplied as argument.

Arguments :
  * {{{directory}}} (Simple and Optional) : string

Expected return value : FileList

=== search ===

Search files where "type" contains "txt" content.

Arguments :
  * {{{type}}} (Simple and Mandatory) : list : 'all','title',                    'genre','filename','artist','album'
  * {{{txt}}} (Simple and Mandatory) : string

Expected return value : FileList

=== getvideodir ===

Lists the files in video dir "directory".

Arguments :
  * {{{directory}}} (Simple and Mandatory) : string

Expected return value : FileList

=== play ===

Begin playing at song or webradio with id "id".

Arguments :
  * {{{id}}} (Simple and Optional) : int

Expected return value : Ack

=== stop ===

Stop playing.

Arguments :
  * ''This command does not accept any argument.''

Expected return value : Ack

=== pause ===

Toggle play/pause.

Arguments :
  * ''This command does not accept any argument.''

Expected return value : Ack

=== next ===

Go to next song or webradio.

Arguments :
  * ''This command does not accept any argument.''

Expected return value : Ack

=== previous ===

Go to previous song or webradio.

Arguments :
  * ''This command does not accept any argument.''

Expected return value : Ack

=== setVolume ===

Set volume to "volume". The volume range is 0-100.

Arguments :
  * {{{volume}}} (Simple and Mandatory) : int

Expected return value : Ack

=== seek ===

Seeks to the position "time" (in seconds) of the current song (in
    playlist mode).

Arguments :
  * {{{time}}} (Simple and Mandatory) : int

Expected return value : Ack

=== random ===

Set random state to "value", "value" should be 0 or 1.

Arguments :
  * {{{value}}} (Simple and Mandatory) : list : 0 or 1

Expected return value : Ack

=== repeat ===

Set repeat state to "value", "value" should be 0 or 1.

Arguments :
  * {{{value}}} (Simple and Mandatory) : list 0 or 1

Expected return value : Ack

=== current ===

Return informations on the current song, webradio or video info.

Arguments :
  * ''This command does not accept any argument.''

Expected return value : SongList or WebradioList or VideoList

=== fullscreen ===

Set video fullscreen to "value", "value" should be 0 (off) or 1 (on).

Arguments :
  * {{{value}}} (Simple and Mandatory) : list 0 or 1

Expected return value : Ack

=== loadsubtitle ===

By default, load subtitle when it is available ("value"=1) or don't
    ("value"=0).

Arguments :
  * {{{value}}} (Simple and Mandatory) : list 0 or 1

Expected return value : Ack

=== playlistInfo ===

Return the content of the playlist "name". If no name is given, return
    the content of the current playlist.

Arguments :
  * {{{name}}} (Simple and Mandatory) : string

Expected return value : SongList

=== playlistList ===

Return the list of recorded playlists.

Arguments :
  * ''This command does not accept any argument.''

Expected return value : PlaylistList

=== playlistAdd ===

Load files or directories passed as arguments ("path") at the position
    "pos" in the playlist "name". If no playlist name is provided, adds files
    in the current playlist.

Arguments :
  * {{{path}}} (Multiple and Mandatory) : string
  * {{{pos}}} (Simple and Optional) : int
  * {{{name}}} (Simple and Optional) : string

Expected return value : Ack

=== playlistRemove ===

Remove songs with ids passed as argument ("id"), from the playlist
    "name". If no name are given, remove songs from current playlist.

Arguments :
  * {{{id}}} (Multiple and Mandatory) : int
  * {{{name}}} (Simple and Optional) : string

Expected return value : Ack

=== playlistClear ===

Clear the current playlist.

Arguments :
  * ''This command does not accept any argument.''

Expected return value : Ack

=== playlistMove ===

Move song with id "id" to newPosition "position".

Arguments :
  * {{{id}}} (Simple and Mandatory) : int
  * {{{newPosition}}} (Simple and Mandatory) : int

Expected return value : Ack

=== playlistShuffle ===

Shuffle the current playlist.

Arguments :
  * ''This command does not accept any argument.''

Expected return value : Ack

=== playlistErase ===

Erase playlists passed as arguments.

Arguments :
  * {{{name}}} (Multiple and Mandatory) : string

Expected return value : Ack

=== playlistLoad ===

Load playlists passed as arguments ("name") at the position "pos".

Arguments :
  * {{{name}}} (Multiple and Mandatory) : string
  * {{{pos}}} (Simple and Optional) : int

Expected return value : Ack

=== playlistSave ===

Save the current playlist to "name" in the database.

Arguments :
  * {{{name}}} (Simple and Mandatory) : string

Expected return value : Ack

=== webradioList ===

Return the list of recorded webradios.

Arguments :
  * ''This command does not accept any argument.''

Expected return value : WebradioList

=== webradioAdd ===

Add a webradio. Its name is "name" and the url of the webradio is
    "url". You can pass a playlist for "url" argument (.pls and .m3u format
    are supported).

Arguments :
  * {{{url}}} (Simple and Mandatory) : string
  * {{{name}}} (Simple and Mandatory) : string

Expected return value : Ack

=== webradioRemove ===

Remove webradios with id equal to "ids".

Arguments :
  * {{{id}}} (Multiple and Mandatory) : int

Expected return value : Ack

=== webradioClear ===

Remove all recorded webradios.

Arguments :
  * ''This command does not accept any argument.''

Expected return value : Ack

=== playQueue ===

Begin playing song with id "id" in the queue.

Arguments :
  * {{{id}}} (Simple and Mandatory) : int

Expected return value : Ack

=== queueInfo ===

Return the content of the queue.

Arguments :
  * {{{name}}} (Simple and Mandatory) : string

Expected return value : SongList

=== queueAdd ===

Load files or directories passed as arguments ("path") at the position
    "pos" in the queue.

Arguments :
  * {{{path}}} (Multiple and Mandatory) : string
  * {{{pos}}} (Simple and Optional) : int

Expected return value : Ack

=== queueLoadPlaylist ===

Load playlists passed in arguments ("name") at the position "pos" in
    the queue.

Arguments :
  * {{{name}}} (Multiple and Mandatory) : string
  * {{{pos}}} (Simple and Optional) : int

Expected return value : Ack

=== queueRemove ===

Remove songs with ids passed as argument ("id"), from the queue.

Arguments :
  * {{{id}}} (Multiple and Mandatory) : int

Expected return value : Ack

=== queueClear ===

Remove all songs from the queue.

Arguments :
  * ''This command does not accept any argument.''

Expected return value : Ack

=== setvideodir ===

Set the current video directory to "directory".

Arguments :
  * {{{directory}}} (Simple and Optional) : string

Expected return value : Ack

