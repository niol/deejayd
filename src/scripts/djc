#!/usr/bin/env python

import sys
from optparse import OptionParser

from deejayd.net.client import DeejayDaemonSync, DeejaydError,\
                               DeejaydWebradioList,DeejaydPlaylist,\
                               ConnectError

class DjcError(Exception): pass

class AvailableCommands:

    def __init__(self, server):
        self.server = server

    def playtoggle(self, args):
        """Toggle play/pause"""
        self.server.play_toggle()

    def stop(self, args):
        """Stop player"""
        self.server.stop()

    def previous(self, args):
        """Previous element in player"""
        self.server.previous()

    def next(self, args):
        """Next element in player"""
        self.server.next()

    def seek(self, args):
        """Set the position in the stream to argument value"""
        try: pos = int(args[0])
        except (ValueError, IndexError):
            raise DjcError('Bad command line')
        self.server.seek(pos)

    def volume(self, args):
        """Set volume to argument value.
             If preceeded with 'up'|'down', (in|dea)crease volume with value."""
        try:
            if args[0] in ['up', 'down']:
                volume = self.server.get_status()['volume']
                possible_delta = int(args[1])
                if args[0] == 'up':
                    volume += possible_delta
                elif args[0] == 'down':
                    volume -= possible_delta
            else:
                volume = int(args[0])
            self.server.set_volume(volume)
        except (ValueError, IndexError):
            raise DjcError('Bad command line')

    def set_option(self, args):
        """Set option to argument value. ex: djc set_option random 1"""
        try:
            option_name = args[0]
            option_value = int(args[1])
        except (ValueError, IndexError):
            raise DjcError('Bad command line')
        self.server.set_option(option_name,option_value)

    def set_mode(self, args):
        """Set active mode to argument value. ex: djc set_mode webradio"""
        try: mode = args[0]
        except IndexError:
            raise DjcError('You need to choose a mode')
        else:
            self.server.set_mode(mode)

    def set_slang(self, args):
        """select a subtitle channel"""
        try: slang = args[0]
        except IndexError:
            raise DjcError('You need to choose a language index')
        else:
            self.server.set_slang(slang)

    def set_alang(self, args):
        """select a audio channel"""
        try: alang = args[0]
        except IndexError:
            raise DjcError('You need to choose a language index')
        else:
            self.server.set_alang(alang)

    def status(self, args):
        """Get full deejayd status"""
        for (key, value) in self.server.get_status().items():
            print key, ':', value

    def audio_update(self, args):
        """Update audio library"""
        for (key, value) in self.server.update_audio_library().items():
            print key, ':', value

    def get_audio_dir(self, args):
        """Get the content of an directory in audio library.
           ex: djc get_audio_dir "dirname"
           if no dirname has been entered, return root directory content"""
        try: dirname = args[0]
        except IndexError: dirname = ""

        rsp = self.server.get_audio_dir(dirname)
        for dir in rsp.get_directories(): print "directory:", dir
        for file in rsp.get_files(): print "file:", file["filename"]

    def video_update(self, args):
        """Update video library"""
        for (key, value) in self.server.update_video_library().items():
            print key, ':', value

# Playlist commands
    def __get_pl_obj(self, args, arg_pos = 0):
        try: pl_name = args[arg_pos]
        except IndexError:
            pl_name = None
        return DeejaydPlaylist(self.server, pl_name)

    def playlist_save(self, args):
        """ Save current playlist
            usage : djc playlist_save pl_name"""
        try: pl_name = args[0]
        except IndexError:
            raise DjcError('You have to enter a playlist name')
        DeejaydPlaylist(self.server, None).save(pl_name)

    def playlist_erase(self, args):
        """ Erase a recorded playlist
            usage : djc playlist_erase pl_name"""
        try: pl_name = args[0]
        except IndexError:
            raise DjcError('You have to enter a playlist name')
        self.server.erase_playlist(pl_name)

    def playlist_list(self, args):
        """ Return list of recorded playlist """
        contents = self.server.get_playlist_list()
        for media in contents.get_medias():
            print media["name"]

    def playlist_info(self, args):
        """ Get playlist's content
            ex: djc playlist_info pl_name
            if no name has been entered, return content of the current pl"""
        contents = self.__get_pl_obj(args).get()
        for media in contents.get_medias():
            print media["pos"], '|', media["title"], '|', media["artist"], '|',\
                  media["album"], '|', media["id"]

    def playlist_clear(self, args):
        """ clear playlist
            ex: djc playlist_clear pl_name
            if no name has been entered, clear the current pl"""
        self.__get_pl_obj(args).clear().get_contents()

    def playlist_shuffle(self, args):
        """ shuffle playlist
            ex: djc playlist_shuffle pl_name
            if no name has been entered, shuffle the current pl"""
        self.__get_pl_obj(args).shuffle().get_contents()

    def playlist_add(self, args):
        """ add dirs/files to playlist
            ex: djc playlist_add dir/file pl_name
            if no pl_name has been entered, add to the current pl"""
        try: item = args[0]
        except IndexError:
            raise DjcError('You have to enter dirs/files')
        self.__get_pl_obj(args, 1).add_song(item).get_contents()

    def playlist_remove(self, args):
        """ remove songs from playlist
            ex: djc playlist_remove song_id1,song_id2 pl_name
            if no pl_name has been entered, remove from the current pl"""
        try: item = args[0]
        except IndexError:
            raise DjcError('Enter song_id please')
        else:
            ids = item.split(",")
            try: ids = [int(id) for id in ids]
            except ValueError:
                raise DjcError("song_id has to be an integer")
        self.__get_pl_obj(args, 1).del_songs(ids).get_contents()

# Webradio commands
    def webradio_add(self, args):
        """Add a webradio. ex: djc add_webradio wr_name url"""
        try:
            wr_name = args[0]
            wr_url = args[1]
        except IndexError:
            raise DjcError('Bad command line')
        wr = DeejaydWebradioList(self.server)
        wr.add_webradio(wr_name,wr_url)

# dvd commands
    def dvd_reload(self, args):
        """Reload the dvd"""
        ans = self.server.dvd_reload()
        ans.get_contents()

    def dvd_get_content(self, args):
        """Get contents of the current dvd"""
        ans = self.server.get_dvd_content()
        dvd_content = ans.get_dvd_contents()
        print """
DVD content
title : %s
longest_track : %s
""" % (dvd_content["title"],dvd_content["longest_track"])
        for t in dvd_content["tracks"]:
            print """
  track : %s (%s)
""" % (t['id'], t['length'])


def get_cmds():
    cmds = []
    for cmd_name in dir(AvailableCommands):
        if cmd_name[0] != '_':
            cmd = getattr(AvailableCommands, cmd_name)
            cmds.append(' : '.join([cmd_name, cmd.__doc__]))
    return cmds


cmd_sep = "\n  * "
cmds = cmd_sep.join(get_cmds())
usage = """usage: %prog [options] COMMAND [COMMAND_OPTIONS]
where COMMAND may be :""" + cmd_sep + cmds

parser = OptionParser(usage=usage)
parser.add_option("", "--host",
                  action="store", type="string",
                  dest="host", default="localhost",
                  help="Hostname or ip address on which deejayd listens. Default is localhost.")
parser.add_option("", "--port",
                  action="store", type="int",
                  dest="port", default=6800,
                  help="Port on which deejayd listens. Default is 6800.")
(options, args) = parser.parse_args()

def fail_cmdline():
    parser.print_help()
    sys.exit("Bad command line.")

if __name__ == '__main__':

    deejayd = DeejayDaemonSync()

    if len(args) < 1:
        fail_cmdline()

    command = args[0]

    cmds = AvailableCommands(deejayd)
    if command in dir(cmds):
        try: deejayd.connect(options.host, options.port)
        except ConnectError, msg:
            print msg
        else:
            try:
                getattr(AvailableCommands, command)(cmds, args[1:])
            except DeejaydError, msg:
                print "Deejayd Error:", msg
            except DjcError, msg:
                print "Djc Error:", msg
            deejayd.disconnect()
    else:
        fail_cmdline()


# vim: ts=4 sw=4 expandtab
